{"version":3,"sources":["../src/steam.js"],"names":["config","Steam","constructor","params","apiKey","process","env","STEAM_API_KEY","Error","getPlayerSummaries","steamIds","endpoint","apiEndpoint","_commaSeparatedIds","res","uri","json","players","response","size","map","playerObject","error","console","ids","concat","join"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;;;;;AAGA;AACA,iBAAOA,MAAP;;AAGe,MAAMC,KAAN,CAAY;AACzBC,cAAYC,MAAZ,EAAoB;AAClB,UAAMC,SAASC,QAAQC,GAAR,CAAYC,aAAZ,IAA6BJ,OAAOC,MAAnD;AACA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAII,KAAJ,CAAU,gCAAV,CAAN;AACA;AACD;AACD,SAAKR,MAAL,GAAc,EAAEI,MAAF,EAAd;AACD;;AAEKK,oBAAN,CAAyBC,QAAzB,EAAmC;AAAA;;AAAA;AACjC,UAAI,CAACA,QAAL,EAAe;AAAE,cAAM,IAAIF,KAAJ,CAAU,kDAAV,CAAN;AAAsE;AACvF,YAAMG,WAAW,gBAAMC,WAAN,CACf,wBAAaH,kBADE,EAEf,MAAKT,MAAL,CAAYI,MAFG,EAGf,MAAKS,kBAAL,CAAwBH,QAAxB,CAHe,CAAjB;AAKA,UAAI;AACF,YAAII,MAAM,MAAM,oCAAG,EAAEC,KAAKJ,QAAP,EAAiBK,MAAM,IAAvB,EAAH,CAAhB;AACA,YAAIC,UAAUH,IAAII,QAAJ,CAAaD,OAA3B;AACA,YAAIA,QAAQE,IAAR,GAAe,CAAnB,EAAsB;AACpB,iBAAOF,QAAQG,GAAR,CAAY;AAAA,mBAAgB,qBAAWC,YAAX,CAAhB;AAAA,WAAZ,CAAP;AACD,SAFD,MAEO;AACL,gBAAM,IAAIb,KAAJ,CAAU,2CAAV,CAAN;AACD;AACD,eAAO,EAAP;AACD,OATD,CASE,OAAMc,KAAN,EAAa;AACbC,gBAAQD,KAAR,CAAcA,KAAd;AACD;AAlBgC;AAmBlC;;AAGD;;;AAGAT,qBAAmBW,GAAnB,EAAwB;AACtB,WAAO,GAAGC,MAAH,CAAUD,GAAV,EAAeE,IAAf,CAAoB,GAApB,CAAP;AACD;AArCwB;kBAANzB,K","file":"steam.js","sourcesContent":["import dotenv from 'dotenv';\nimport rp from 'request-promise-native';\n\nimport { ACTION_PATHS } from './constants';\nimport Utils from './utils';\n\nimport Player from './entities/player';\n\n\n// Load .env\ndotenv.config();\n\n\nexport default class Steam {\n  constructor(params) {\n    const apiKey = process.env.STEAM_API_KEY || params.apiKey;\n    if (!apiKey) {\n      throw new Error('STEAM_API_KEY must be provided');\n      return;\n    }\n    this.config = { apiKey };\n  }\n\n  async getPlayerSummaries(steamIds) {\n    if (!steamIds) { throw new Error('#getPlayerSummaries: steamIds parameter missing.'); }\n    const endpoint = Utils.apiEndpoint(\n      ACTION_PATHS.getPlayerSummaries,\n      this.config.apiKey,\n      this._commaSeparatedIds(steamIds)\n    );\n    try {\n      let res = await rp({ uri: endpoint, json: true });\n      let players = res.response.players;\n      if (players.size > 0) {\n        return players.map(playerObject => new Player(playerObject));\n      } else {\n        throw new Error('No players found wih provided steam id(s)');\n      }\n      return [];\n    } catch(error) {\n      console.error(error);\n    }\n  }\n\n\n  /**\n   * \"Private\"\n   */\n  _commaSeparatedIds(ids) {\n    return [].concat(ids).join(',');\n  }\n}\n"]}